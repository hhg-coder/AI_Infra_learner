/*
前向声明（Forward Declaration）详解

1. 基本概念
前向声明是一种在编程中提前声明标识符（类、函数、变量等）而不提供完整定义的技术。
主要作用：解决编译依赖问题，特别是在C++中处理头文件依赖和循环引用时。

2. 核心作用
- 减少编译依赖：避免头文件相互包含
- 解决循环引用：允许两个类相互引用
- 加速编译：减少不必要的头文件解析

3. 使用场景
*/
// 场景1：类的前向声明（最常见）
class MyClass;  // 前向声明

void processObject(MyClass* obj);  // 仅需指针/引用时可用

class Container {
    MyClass* member;  // 正确：前向声明允许使用指针
    // MyClass instance;  // 错误！需要完整定义
};

// 场景2：函数的前向声明
void helperFunction(int param);  // 声明在定义前使用

int main() {
    helperFunction(42);  // 合法调用
}

void helperFunction(int param) { /* 实现 */ }  // 实际定义

// 场景3：模板前向声明
template<typename T> class TemplateClass;  // 模板前向声明

/*
4. 关键限制
*/
// 限制1：不能实例化对象
class UndefinedClass;
// UndefinedClass obj;  // 编译错误：不完整类型

// 限制2：不能访问成员
class MyClass;
void invalidUse(MyClass obj) {
    // obj.member = 10;  // 错误：成员未知
}

// 限制3：不能用于继承
class Base;
// class Derived : public Base {};  // 错误：基类不完整

/*
5. 最佳实践示例
*/
// File: NetworkService.h
#pragma once
class DataProcessor;  // 前向声明代替#include "DataProcessor.h"

class NetworkService {
public:
    void sendData(DataProcessor* processor);  // 仅使用指针
private:
    DataProcessor* m_processor;
};

// File: DataProcessor.h
#pragma once
class NetworkService;  // 对称前向声明

class DataProcessor {
public:
    void process(NetworkService* service);  // 使用前向声明
};

// File: NetworkService.cpp
#include "NetworkService.h"
#include "DataProcessor.h"  // 在cpp文件中包含完整定义

void NetworkService::sendData(DataProcessor* processor) {
    // 可安全使用processor指针
    processor->process(this);
}

/*
6. 前向声明 vs #include 对比表
| 特性               | 前向声明                     | #include 头文件             |
|--------------------|-----------------------------|----------------------------|
| 编译速度           | ✅ 更快（减少依赖）          | ❌ 较慢                     |
| 循环引用           | ✅ 可解决                    | ❌ 导致编译错误             |
| 适用范围           | ❌ 仅指针/引用               | ✅ 完整类型访问             |
| 维护成本           | ✅ 低（无需管理头文件）      | ❌ 高（需管理包含关系）     |
| 模板支持           | ⚠️ 有限支持                 | ✅ 完全支持                |

7. 典型应用场景
1) Pimpl 惯用法（指针隐藏实现）
2) 工厂模式中返回基类指针
3) 回调接口声明
4) 减少大型项目的编译时间

8. 重要提示
以下情况必须使用完整定义：
- 实例化对象
- 访问类成员
- 使用 sizeof 操作符
- 继承或类型转换

通过合理使用前向声明，可以显著提高代码的编译效率和模块化程度，特别适合大型项目开发。
*/
