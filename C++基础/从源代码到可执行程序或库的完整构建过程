C++ 从源代码到可执行程序或库的完整构建过程：

1. 预处理 (Preprocessing)
   - 输入：.cpp/.h/.hpp 源文件
   - 输出：.i/.ii 预处理后文件
   - 操作：
        * 处理 #include 指令（插入头文件内容）
        * 展开宏定义 (#define)
        * 执行条件编译 (#ifdef/#endif)
        * 删除所有注释
   - 工具：预处理器 (cpp)
   - 目的：生成纯净的C++代码

2. 编译 (Compilation)
   - 输入：.i 预处理后文件
   - 输出：.s 汇编代码文件
   - 操作：
        * 词法分析（生成标记）
        * 语法分析（构建AST抽象语法树）
        * 语义分析（类型检查等）
        * 代码优化
        * 生成平台相关的汇编代码
   - 工具：编译器 (g++/clang++)
   - 目的：将高级代码转换为低级汇编代码

3. 汇编 (Assembly)
   - 输入：.s 汇编代码文件
   - 输出：.o/.obj 目标文件
   - 操作：
        * 将汇编指令转换为机器码
        * 生成包含机器指令的目标文件
        * 标记未解析的符号引用
   - 工具：汇编器 (as)
   - 目的：生成二进制目标文件

4. 链接 (Linking)
   - 输入：.o 目标文件 + 库文件
   - 输出：可执行文件 (.exe/a.out) 或库文件
   - 操作：
        * 符号解析（查找所有符号定义）
        * 地址重定位（分配内存地址）
        * 库链接方式：
            - 静态链接：将库代码复制到最终可执行文件中
            - 动态链接：运行时加载共享库
   - 工具：链接器 (ld)
   - 目的：组合所有组件生成最终可执行文件

完整构建流程示意图：
[源代码] → (预处理) → [纯净代码] → (编译) → [汇编代码] → (汇编) → [目标文件] → (链接) → [可执行文件]

实际使用示例：
g++ main.cpp helper.cpp -o program 命令会依次执行：
1. 预处理 main.cpp 和 helper.cpp
2. 编译预处理后的代码
3. 汇编生成目标文件
4. 链接所有目标文件和标准库
