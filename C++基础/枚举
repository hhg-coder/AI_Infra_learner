enum Weekday {};无作用域枚举；
enum class Weekday{}; 作用域枚举；
作用域枚举（enum class）可以解决无作用域枚举（传统 enum）的以下主要问题：

命名冲突
传统枚举的枚举值会暴露在外部作用域，容易与其他变量或枚举值发生冲突。例如，多个枚举都定义了 MONDAY，会导致编译错误。

类型安全
传统枚举可以隐式转换为整数类型，容易导致类型混淆和错误。作用域枚举不能隐式转换为整数，必须显式转换，更安全。

可控的作用域
作用域枚举的枚举值只能通过枚举类型前缀访问（如 Weekday::MONDAY），不会污染全局命名空间，代码更清晰。

总结：
作用域枚举让枚举值只在枚举类型内部可见，避免命名冲突，提高类型安全，是现代 C++ 推荐的做法。
